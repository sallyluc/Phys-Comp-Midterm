
/*
 Project Title: Physical Computing Midterm: Cipher Box
 Student Name: Sally Luc
 Course Code & Title: DIGF 2B03 Physical Computing
 OCAD University
 Created on Saturday February 7, 2015
 
 Based on
 Tone, Tom Igoe, http://www.arduino.cc/en/Tutorial/Tone
 */


/*
 Variable Dictionary - Combination Lock
 
 Variable Name                 Type                   Description
 potentiometer                 int                    Pin for potentiometer to get its values.
 potVal                        int                    Stores the values retrieved from the potentiometer.
 
 lockedLED                     int                    LED lights up when the combination lock is still locked.
 unlockedLED                   int                    LED lights up when the combination lock is unlocked.
 comboLight                    int                    LED lights up when each number is set.
 
 setPass                       array (int)            Stores the password vals.
 
 nextNumCount                  int                    Stores a counter value to check if the user has hit both last value and first value in order to move to unlocking the next number. 
 
 firstNumClear                 boolean                Stores a bool to see if the first combo number is solved.
 secondNumClear                boolean                Stores a bool to see if the second combo number is solved.
 thirdNumClear                 boolean                Stores a bool to see if the third combo number is solved.
 
 moveToNum2                    boolean                Stores a bool to see if the user can unlock the second number code.
 moveToNum3                    boolean                Stores a bool to see if the user can unlock the third number code.
 
 timerPerNum                   int                    Stores a timer value that resets the code if the user takes to long to unlock the next number.
 */

// Variable Declaration
int potentiometer = A0; 
int potVal;
int lockedLED = 11, unlockedLED = 10, comboLight = 12;

int setPass [] = {
  50, 20, 40};

int nextNumCount;
boolean firstNumClear = false;
boolean secondNumClear = false;
boolean thirdNumClear = false;

boolean moveToNum2 = false;
boolean moveToNum3 = false;
int timerPerNum = 0;

// Declares the digital output pins and calls Serial
void setup ()
{
  Serial.begin (9600);
}

// Loop - Runs the code repeatedly
void loop ()
{
  runComboLock();
}




//--------------------------------------------------------------COMBINATION LOCK FUNCTIONS-----------------------------------------------------------------------------

void runComboLock()
{
  // Reads the potentiometer values for the combination lock
  potVal = analogRead(potentiometer);

  // Maps values to match the lock
  potVal = map (potVal, 0, 1023, 0, 60);
  Serial.print("Pot Val: ");
  Serial.println(potVal);

  // Runs methods/functions to check if each number is unlocked. 
  checkFirstComboNum();
  checkSecondComboNum();
  checkThirdComboNum();

  // Signals that the full lock has been unlocked. Lights LED to green
  if (thirdNumClear!=true)
    analogWrite(lockedLED, 230);
  // Slows down rate of program
  delay(500);
}

// Checks if the first number is unlocked. Allows user to unlock first number.  
void checkFirstComboNum()
{
  // check if the first number user dials is equivalent to password. If it is, set bool to true (because user reached the number) in order to store the value.
  if (potVal == setPass[0]&&firstNumClear==false)
  {
    firstNumClear = true;
  }

// if user reached the first number, run code
  if (firstNumClear == true)
  {
    timerPerNum++; // timer starts. user has a certain amount of seconds to dial to the last val, then first val in order to set the first unlocked number.
    
    // Checks if user has set the dial to the last val or first val
    if (nextNumCount == 0 || nextNumCount == 1)
    {
      // increment the check if pot value reached final number
      if (potVal== 60)
        nextNumCount = 1;
      else if (potVal == 0) // Unlock ability to set next number 
      {
        nextNumCount = 2;
        moveToNum2 = true;
      }
      else
      {
        if (timerPerNum >=5000 || nextNumCount >= 2) // Resets program if user takes too long to set the number
        {
          reset();
        }
      } 
    }
  }
}

// Checks if the second number is unlocked. Allows user to unlock second number. Code similar to the checkFirstComboNum() method.
void checkSecondComboNum()
{
  if (moveToNum2 == true)
  {
    firstNumClear = false;

    if (potVal == setPass[1]&&secondNumClear==false)
    {
      secondNumClear = true;
      timerPerNum = 0; // Resets the timer and the check last/first val count
      nextNumCount = 0;
    }

    if (secondNumClear == true)
    {
      timerPerNum++;
      if (nextNumCount == 0 || nextNumCount == 1)
      {
        if (potVal== 60)
          nextNumCount = 1;
        else if (potVal == 0)
        {
          nextNumCount = 2;
          moveToNum3 = true;
        }
        else
        {
          if (timerPerNum >=5000)
          {
            reset();
          }
        } 
      }
    }
    Serial.println ("MOVE TO NUM 2"); 
    Serial.println (timerPerNum);

    digitalWrite(comboLight, 245);
    digitalWrite(unlockedLED, 245);
    digitalWrite(lockedLED, 255);
  } 
}

// Checks if the third number is unlocked. Allows user to unlock third number. Code similar to the checkFirstComboNum() method.
void checkThirdComboNum()
{
  if (moveToNum3 == true)
  {
    secondNumClear = false;

    if (potVal == setPass[2]&&thirdNumClear==false)
    {
      thirdNumClear = true;
    }

    if (thirdNumClear == true && potVal == setPass[2]){ 
      Serial.println ("UNLOCKED"); 
      analogWrite(unlockedLED, 245);
      analogWrite(lockedLED, 255);
    }
    else
    {
      if (thirdNumClear == true && potVal == 0){
        reset();
        analogWrite(unlockedLED, 255);
      }
    }
    Serial.println ("MOVE TO NUM 3"); 
  } 
}

// Resets everything back to original state. 
void reset()
{
  nextNumCount = 0;
  firstNumClear = false;
  secondNumClear = false;
  thirdNumClear = false;

  moveToNum2 = false;
  moveToNum3 = false;
  timerPerNum = 0;
}




//--------------------------------------------------------------COMBINATION LOCK FUNCTIONS-----------------------------------------------------------------------------

